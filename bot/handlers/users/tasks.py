from aiogram import types
from aiogram.dispatcher import FSMContext
from keyboards.inline import (category_keyboard, cb_category_action,
                              cb_start_action, cb_task_action, task_keyboard)
from loader import category_api, dp, task_api
from utils.utils import delete_last_message, format_datetime, state_finish


def _build_task_text(tasks: list[dict] | None) -> str:
    if not tasks:
        return (
            "‚òëÔ∏è –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —É –í–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á.\n\n"
            '–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞—á—É".'
        )
    text = "üìã <b>–í–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞—á–∏:</b>\n\n"
    task_text = ""
    for idx, task in enumerate(tasks, start=1):

        title = task.get("title")
        description = task.get("description", "‚Äî")
        category = task.get("category_name", "‚Äî")
        created_at = format_datetime(task.get("created_at"))
        due_date = format_datetime(task.get("due_date"))

        if task.get("is_completed"):
            title = f"<s>{title}</s> (–í—ã–ø–æ–ª–Ω–µ–Ω–æ)"
        elif task.get("is_expired"):
            title = f"<s>{title}</s> (–ò—Å—Ç—ë–∫ —Å—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è)"

        task_text += (
            f"üìù <strong>{idx}. {title}</strong>.\n"
            f"   üóí –û–ø–∏—Å–∞–Ω–∏–µ: {description}.\n"
            f"   üè∑ –ö–∞—Ç–µ–≥–æ—Ä–∏—è: <em>{category}.</em>\n"
            f"   üïí –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è: <em>{created_at}.</em>\n"
            f"   ‚è≥ –°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: <em>{due_date}.</em> (America/Adak)\n"
            "‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ\n"
        )
    text = (
        f"{text}"
        f"{task_text}\n"
        "–ü—Ä–∏ –Ω–∞–∂–∞—Ç–∏–∏ –Ω–∞ –∑–∞–¥–∞—á—É, –æ–Ω–∞ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–∫–ª—é—á–∞–µ—Ç —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å.\n\n"
        "‚úÖ - –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n"
        "‚ùå - –ó–∞–¥–∞—á–∞ –Ω–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.\n"
        "‚è∞ - –ó–∞–¥–∞—á–∞ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞.\n"
    )
    return text


@dp.callback_query_handler(cb_start_action.filter(action="task_menu"), state="*")
async def task_menu(query: types.CallbackQuery, user: dict, state: FSMContext):
    await query.answer()
    await state_finish(state)
    await delete_last_message(query.message)
    tasks = await task_api.get(params={"user_id": user["user_id"]})
    tasks = [tasks] if isinstance(tasks, dict) else tasks
    text = _build_task_text(tasks)
    await query.message.answer(text, reply_markup=task_keyboard(tasks))


async def task_menu_message(message: types.Message, user: dict, state: FSMContext):
    await state_finish(state)
    await delete_last_message(message)
    tasks = await task_api.get(params={"user_id": user["user_id"]})
    tasks = [tasks] if isinstance(tasks, dict) else tasks
    text = _build_task_text(tasks)
    await message.answer(text, reply_markup=task_keyboard(tasks))


@dp.callback_query_handler(
    cb_task_action.filter(action="task_switch_status"), state="*"
)
async def task_switch_status(
    query: types.CallbackQuery, user: dict, callback_data: dict, state: FSMContext
):
    await query.answer()

    task_id = callback_data["task_id"]
    current_status = callback_data["status"]

    if current_status == "expired":
        await query.answer("–≠—Ç—É –∑–∞–¥–∞—á—É –Ω–µ–ª—å–∑—è –∏–∑–º–µ–Ω–∏—Ç—å ‚è∞", show_alert=True)
        return

    if current_status == "pending":
        task = await task_api.mark_completed(task_id)
    else:
        task = await task_api.mark_incomplete(task_id)

    if not task:
        await query.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏ ‚ùå", show_alert=True)
        return

    await task_menu(query, user, state)


@dp.callback_query_handler(cb_start_action.filter(action="sort_by_category"))
async def task_sort_by_category(
    query: types.CallbackQuery,
):
    await query.answer()
    await delete_last_message(query.message)
    categories = await category_api.get()
    categories = [categories] if isinstance(categories, dict) else categories
    if not categories:
        await query.message.answer(
            "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–∑–¥–∞–π—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é."
        )
        return
    await query.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=category_keyboard(categories)
    )


@dp.callback_query_handler(cb_category_action.filter(action="select_category"))
async def task_show_by_category(
    query: types.CallbackQuery,
    user: dict,
    callback_data: dict,
):
    await query.answer()
    await delete_last_message(query.message)
    tasks = await task_api.get(
        params={"user_id": user["user_id"], "category": callback_data["category_id"]}
    )
    tasks = [tasks] if isinstance(tasks, dict) else tasks
    text = _build_task_text(tasks)
    await query.message.answer(text, reply_markup=task_keyboard(tasks))
